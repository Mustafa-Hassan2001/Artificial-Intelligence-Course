# -*- coding: utf-8 -*-
"""Graded_Task_03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZjYFY3q7aHyMyhih3neaMhTJN3klPCeP

Import pandas and matplotlib
"""

import pandas as pd
import matplotlib.pyplot as plt

"""Read Basic-2.xlsx"""

df = pd.read_excel('Basic-2.xlsx')
df.head()

"""Show how many times 'no' showed up in  c13 column"""

no_times = (df['c13'] == 'no').sum()
no_times

"""Sort the rows according to the first and then sixth column, where ascending in the first and descending in the sixth column. Display only first 6 columns.

"""

sorted_rows = df.sort_values(by=['c1', 'c6'], ascending=[True, False]).iloc[:, :6]
sorted_rows

"""In columns c1, c6 and c11, convert every number to the nearest integer.
In column c12, replace the space between two words by underscore.

"""

df.fillna(0, inplace=True)

print("After filling missing values with 0:")
print(df)

df[['c1', 'c6', 'c11']] = df[['c1', 'c6', 'c11']].applymap(round)

print("\nAfter rounding values in c1, c6, and c11:")
print(df)

df['c12'] = df['c12'].str.replace(' ', '_')

print("\nAfter replacing spaces in column c12:")
print(df)

"""In columns c2, c3 and c9, round the values to the nearest 0, 0.5 or 1. If any value is negative, then replace it with zero."""

df[['c2', 'c3', 'c9']] = df[['c2', 'c3', 'c9']].applymap(lambda x: max(0, round(x * 2) / 2))

print(df)

"""Plot hist graph for c3 and c9"""

plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.hist(df['c3'], bins=10, color='blue', edgecolor='black')
plt.title('Histogram of c3')
plt.xlabel('c3 values')
plt.ylabel('Frequency')

plt.subplot(1, 2, 2)
plt.hist(df['c9'], bins=10, color='green', edgecolor='black')
plt.title('Histogram of c9')
plt.xlabel('c9 values')
plt.ylabel('Frequency')

plt.tight_layout()

"""Draw scatter plot for any 3 relevant columns in your dataframe"""

numeric_df = df.apply(pd.to_numeric, errors='coerce').dropna()

plt.figure(figsize=(8, 6))

plt.scatter(numeric_df['c4'], numeric_df['c5'], color='green', label='c4 vs c5')
plt.scatter(numeric_df['c7'], numeric_df['c8'], color='blue', label='c7 vs c8')
plt.scatter(numeric_df['c10'], numeric_df['c11'], color='red', label='c10 vs c11')

plt.xlabel('X')
plt.ylabel('Y')
plt.title('Relevant Columns')
plt.legend()
plt.grid(True)
plt.show()

