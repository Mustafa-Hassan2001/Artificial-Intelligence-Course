# -*- coding: utf-8 -*-
"""Intermediate Python Programming.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A1s9-_MlWTptlNUhAhNmHLglmj_rAgBz

# **TOPIC-1: List**
"""

mylist = ["Banana", "Apple", "Mango"]
print(mylist)

mylist.append("Charry")

print(mylist)

mylist.insert(1, "Buebarry")
print(mylist)

mylist.pop()  #remove last element

print(mylist)

mylist.remove("Apple") #remove any spec. ele

print(mylist)

mylist.clear() #remove all ele
print(mylist)

mylist = [4,5,67,23,4,]
mylist.sort()
print(mylist)

mylist1 = [4,5,67,23,4]
mylist2 = sorted(mylist1)
print(mylist2)

mylist = [0] * 5
print(mylist)

new_list = mylist1 + mylist2
print(new_list)

mylisst = [2,3,4,5,67,1,3,7]
a = mylisst[1:5]
print(a)

print(mylisst[:5]) #till 4
print(mylisst[1:]) #skip 1 and print all
print(mylisst[::5]) # start from 1 skip 4
print(mylisst[1::]) # skip 1
print(mylisst[2::]) # skip till 2
print(mylisst[::4]) # start form 1 index skip 3
print(mylisst[::-1]) # reverse the list

list_org = ["abanaa", "Apple", "orange"]
list1 = list_org  #if use don't copy the changes not effect on org
print(list1)
list1.append("Charry")
print(list1)
print(list_org)

list_org = ["abanaa", "Apple", "orange"]
list1 = list_org.copy() #if use copy the changes not effect on org
print(list1)
list1.append("Charry")
print(list1)
print(list_org)

mylist = [1, 2, 3, 4, 5, 6]
b = [i*i for i in mylist]  #fastet way to copy one list in another
print(mylist)
print(b)

"""# **Topic-2: Tuples**"""

mytup = "Max", 40, "Bosten"
print(mytup)

item = mytup[0]
item1 = mytup[2]
item2 = mytup[-2]
item3 = mytup[-1]
print(item)
print(item1)
print(item2)
print(item3)

mytup[0] = "Alex" # error tuple can't be change

for i in mytup:
  print(i)

if "Max" in mytup:
  print("yes")
else:
  print(No)

print(len(mytup))

mytup2 = ['z','a','e', 'a', 'b']
print(mytup2.count('a'))

mytup2 = ['z','a','e', 'a', 'b']
mylist = list(mytup)

print(mylist)

mytup3 = tuple(mylist)
print(mytup3)

mytup4 = "Max", 40, "Bosten"
  name, age, city = mytup4
  print(name)
  print(age)
  print(city)

mytup5 = "Max", 40, "Bosten", 4, 5, 6, 3, "My"
print(mytup5[::2])
print(mytup5[::1])
print(mytup5[:2])

mytuple = (1, 2, 3, 4, 5, 7,5)
i1, *i2, i3 = mytuple
print(i1)
print(i2)
print(i3)

"""# **Topic-3: Dictionaries**"""

mydict = {
    "name" : "Mustafa",
    "Class" : "12",
    "Age" : 3,
    "Gemder" : "M"
}
print(mydict)

mydict["Email"] = "FA21"
print(mydict)

del mydict["Class"]

print(mydict)

mydict.pop("Age")
print(mydict)

mydict.popitem()
print(mydict)

if "name" in mydict:
  print(mydict["name"])

try:
  print(mydict["name"])
except:
  print("Error")

for key in mydict:
  print(key)

print(mydict.keys())
print(mydict.values())

mydicst = {0: 3, 5: 4, 6: 3, 9:1}
print(mydicst[0])

"""# **Topic-3:  Set**"""

myset = set()
myset.add(3)
myset.add(6)
myset.add(2)
myset.add(4)
myset.add(33)

print(myset)
myset.remove(33)
print(myset)
myset.discard(6)
print(myset)
myset.pop()
print(myset)

if 4 in myset:
  print("yes")

odd = {1, 3, 5, 7, 9}
evens = {2, 4, 6, 8, 10}
prime = {2, 3, 4, 5, 7}

u = odd.union(evens)
print(u)

u = odd.intersection(prime)
print(u)

A = {1, 2, 3, 4, 5, 6, 7, 8, 9}
B = {1, 2, 3, 10, 11, 12}

print(A.difference(B))
print(A.symmetric_difference(B))

print(A.intersection_update(B))

"""# **Topic-3: Strings**"""

mystr = "   Hello   "
myst = mystr.strip()
print(myst)
print(mystr)

my_list = ['a'] * 6
my_str = ''
for i in my_list:
  my_str += i
print(my_str)

mystr = ''.join(my_list)
print(mystr)

"""# **Topic-4: Collections**

Collections : Counter, namedtuple, OrderedDict, defaultdict, deque

"""

from collections import Counter
a = "aaaabbc"
my_co = Counter(a)
print(my_co)
print(my_co.most_common(1))
print(my_co.most_common(2))
print(list(my_co.elements()))

from collections import namedtuple
  Point = namedtuple('Point', 'x,y')
  pt = Point(1, -4)
  print(pt)
  print(pt.x, pt.y)

from collections import OrderedDict
  orderedDict = OrderedDict()
  orderedDict['a'] =1
  orderedDict['b'] =2
  orderedDict['c'] =3
  orderedDict['d'] =4
  print(orderedDict)

  orderedDict = {}
  orderedDict['a'] =1
  orderedDict['b'] =2
  orderedDict['c'] =3
  orderedDict['d'] =4
  print(orderedDict)

from collections import defaultdict
  d = defaultdict(int)
  d['a'] = 1
  d['b'] = 2
  print(d['a'])
  print(d['c']) #default int value

  d = defaultdict(float)
  d['a'] = 1
  d['b'] = 2
  print(d['a'])
  print(d['c']) #default float value

"""# **Topic-4: IterTools**

Itertools: product, perumations, combinations, accumulate, groupby and interfinite iterators
"""

from itertools import product
a = [1,2]
b = [3,4]
prod = product(a,b)
print(list(prod))

prod = product(a,b, repeat=2)
print(list(prod))

from itertools import permutations
a = [1, 2, 3]
per = permutations(a)
print(list(per))

per = permutations(a, 2)
print(list(per))

from itertools import combinations
a = [1, 2, 3, 4]
comb = combinations(a,2)
print(list(comb))

from itertools import combinations_with_replace
a = [1, 2, 3, 4]
comb_wr = combinations_with_replacement(a,2)
print(list(comb_wr))

from itertools import accumulate
a = [1, 3, 4, 4]
acc = accumulate(a)
print(a)
print(list(acc))

from itertools import accumulate
import operator
a = [1, 3, 4, 4]
acc = accumulate(a, func = operator.mul)
print(a)
print(list(acc))

from itertools import accumulate
import operator
a = [1, 3, 4, 4]
acc = accumulate(a, func = max)
print(a)
print(list(acc))

from itertools import groupby
def smaller_than_3(x):
  return x<3
a = [1, 2, 3, 4, 5]
group_obj = groupby(a, key=smaller_than_3)
for key, value in group_obj:
  print(key, list(value))

from itertools import groupby

person = [{'name':'Mustafa', 'age':25}, {'name':'Raza', 'age':29},
 {'name': 'Iqbal', 'age': 54}, {'name': 'Faheem','age': 21}]

group_obj = groupby(person, key=lambda x: x['age'])
for key, value in group_obj:
  print(key, list(value))

"""# **Topic-6: Lambda**

Lambda arguments: expression



"""

add10 = lambda x: x +10
print(add10(5))

def add10_func(x):
  return x + 10

mult = lambda x,y: x*y
print(mult(2,7))

a = [1, 2, 3, 4, 5]
b = map(lambda x: x*2, a)
print(list(b))

c = [x*2 for x in a]  #same work in less line
c = [x*3 for x in a]
print(c)

a = [1, 2, 3, 4, 5, 6]
b = filter(lambda x: x%2==0, a)  # filter(func, seq)
print(list(b))

c = [x for x in a if x%2==0]
print(c)

c = [x*2 for x in a if x%2==0]
print(c)

a = [1,2,3,4,5,6]
product

#reduce(func, seq)
from functools import reduce
a = [1,2,3,4]
product_A = reduce(lambda x,y: x*y,a)
print(product_A)

Name = input('Enter your name: ')
print("Hello " + Name)

hours = input('Enter the hours')
pay = input('Enter the pay')
total = int(hours) * int(pay)
print("Pay = ", total)

hours = input("Enter the hours: ")
rate = input("Enter the rate: ")
if type(rate) == str:
  print("Error")
else:
  tot = hours*rate
  print("Total = ", tot)

temp = "5 degree"

cel = 0
fahr = float(len(temp))
cel = (fahr - 32.0) * 5.0 / 9.0
print(cel)

for i in [2,1,5]:
    print(i)

# Below is code to find the smallest value from a list of values.
# One line has an error that will cause the code to not work as expected. Which line is it?:

smallest = None
print("Before:", smallest)
for itervar in [3, 41, 12, 9, 74, 15]:
    if smallest is None or itervar < smallest:
        smallest = itervar
        break
    print("Loop:", itervar, smallest)
print("Smallest:", smallest)

for n in "banana":
    print(n)

fruit = "banana"
x = fruit[1]
print(x)

words = 'His e-mail is q-lar@freecodecamp.org'
pieces = words.split()
parts = pieces[3].split('-')
n = parts[1]
print(pieces)
print(parts)

# What will the following code print?

counts = { 'quincy' : 1 , 'mrugesh' : 42, 'beau': 100, '0': 10}
print(counts.get('kris', 0))

# What will the following code print?:

d = dict()
d['quincy'] = 1
d['beau'] = 5
d['kris'] = 9
for (k,i) in d.items():
    print(k, i)

