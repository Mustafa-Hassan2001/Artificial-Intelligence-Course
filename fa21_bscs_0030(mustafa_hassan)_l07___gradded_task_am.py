# -*- coding: utf-8 -*-
"""FA21-BSCS-0030(Mustafa Hassan) L07___Gradded_Task_AM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10RF_23PeflwT_XjjEV98Des_fFmPsZQ5

Step 1: Load the Dataset data.csv
"""

import pandas as pd

DataSet = pd.read_csv('data.csv')

print(DataSet.head())

"""Step 2: look at the columns in the dataset"""

col = DataSet.columns
print(col)

"""Step 3: Look for any null values and get rid of those values to make a clean data set"""

null_values = DataSet.isnull().sum()
print("Null Values:\n", null_values)

clean_DataSet = DataSet.dropna()

print("Clean DataSet Info:")
clean_DataSet.info()

"""Step 4:  Delete column name as ID from dataset"""

if 'id' in DataSet.columns:
    DataSet = DataSet.drop('id', axis=1)
else:
    print("Col id not exist")

print("After Potential Deletion:\n", DataSet.columns)

"""Step 5:  Delete column name as Unnamed from dataset"""

if 'Unnamed: 32' in DataSet.columns:
    DataSet = DataSet.drop('Unnamed: 32', axis=1)
else:
    print("Unnamed = 32 not exist Here")

print("After potential deletion:\n", DataSet.columns)

"""Step 6: Assign the values 0 or 1 and adding a new column 'isCancer'.

Classify the data into two categories 1 and 0 , if column diagnosis is M than set isCancer field to 1 , and if it is B then set it to 0.
"""

def map_diagnosis(diagnosis):
    if diagnosis == 'M':
        return 1
    elif diagnosis == 'B':
        return 0
    else:
        return None

DataSet['isCancer'] = DataSet['diagnosis'].apply(lambda x: map_diagnosis(x))

"""Step 7: Set the target is the label - 'isCancer' and Features to the all the columns except ID and Unnamed.

"""

DataSet = DataSet.drop(columns=['id'], errors='ignore')
DataSet = DataSet.drop(columns=['Unnamed: 32'], errors='ignore')

features = DataSet.drop(columns=['diagnsis'])

target = DataSet['isCancer']

"""Step 8: Perform the test and Train split and set the test size to 0.25

"""

from sklearn.model_selection import train_test_split
import pandas as pd

X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.25, random_state=42)

print("Shape of X_train:", X_train.shape)
print("Shape of X_test:", X_test.shape)
print("Shape of y_train:", y_train.shape)
print("Shape of y_test:", y_test.shape)

"""Steo 9:  Run and Fit the Random Forest model by setting estimitator to 15 on the training set."""

from sklearn.ensemble import RandomForestClassifier
rf_model = RandomForestClassifier(n_estimators=15, random_state=87)
rf_model.fit(X_train, y_train)
print("Random Forest model parameters:\n", rf_model)

"""Step 10: Test the model on the testing set"""

accuracy = rf_model.score(X_test, y_test)
print("Accuracy on test set:", accuracy)

"""Step 11: Measure the accuracy, Precision and Recall of the data"""

from sklearn.metrics import accuracy_score, precision_score, recall_score

y_predict = rf_model.predict(X_test)

Accuracy = accuracy_score(y_test, y_predict)
print("Accuracy:", Accuracy)

Precision = precision_score(y_test, y_predict)
print("Precision:", Precision)

Recall = recall_score(y_test, y_predict)
print("Recall:", Recall)

"""Step 12: Plot the Tree."""

from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

plt.figure(figsize=(20,10))
plot_tree(rf_model.estimators_[0], feature_names=features.columns, filled=True)
plt.show()